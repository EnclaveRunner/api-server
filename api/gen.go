// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// Defines values for RBACPolicyPermission.
const (
	Asterisk RBACPolicyPermission = "*"
	DELETE   RBACPolicyPermission = "DELETE"
	GET      RBACPolicyPermission = "GET"
	HEAD     RBACPolicyPermission = "HEAD"
	PATCH    RBACPolicyPermission = "PATCH"
	POST     RBACPolicyPermission = "POST"
)

// CreateUser defines model for CreateUser.
type CreateUser struct {
	// DisplayName The display name for the new user.
	DisplayName string `json:"displayName"`

	// Name The name of the user to create.
	Name string `json:"name"`

	// Password The password for the new user.
	Password string `json:"password"`
}

// ErrField defines model for ErrField.
type ErrField struct {
	// Error A description of the error related to the field.
	Error string `json:"error"`

	// Field The name of the field that caused the error.
	Field string `json:"field"`
}

// ErrGeneric defines model for ErrGeneric.
type ErrGeneric struct {
	Error string `json:"error"`
}

// PatchMe defines model for PatchMe.
type PatchMe struct {
	// NewDisplayName The new display name for the current user.
	NewDisplayName *string `json:"newDisplayName,omitempty"`

	// NewName The new name for the current user.
	NewName *string `json:"newName,omitempty"`

	// NewPassword The new password for the current user.
	NewPassword *string `json:"newPassword,omitempty"`
}

// PatchUser defines model for PatchUser.
type PatchUser struct {
	// Id The uuid of the user to update.
	Id string `json:"id"`

	// NewDisplayName The new display name for the user.
	NewDisplayName *string `json:"newDisplayName,omitempty"`

	// NewName The new name for the user.
	NewName *string `json:"newName,omitempty"`

	// NewPassword The new password for the user.
	NewPassword *string `json:"newPassword,omitempty"`
}

// RBACPolicy defines model for RBACPolicy.
type RBACPolicy struct {
	// Permission The allowed permission (e.g., "GET", "POST", "*").
	Permission RBACPolicyPermission `json:"permission"`

	// ResourceGroup The name of the resource group. (or "*" for all resource groups)
	ResourceGroup string `json:"resourceGroup"`

	// Role The name of the role. (or "*" for all roles)
	Role string `json:"role"`
}

// RBACPolicyPermission The allowed permission (e.g., "GET", "POST", "*").
type RBACPolicyPermission string

// RBACRole defines model for RBACRole.
type RBACRole struct {
	// Role The name of the role.
	Role string `json:"role"`
}

// RBACUserRolesRequest defines model for RBACUserRolesRequest.
type RBACUserRolesRequest struct {
	// UserId The uuid of the user.
	UserId string `json:"userId"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	// Id The uuid of the user to retrieve.
	Id string `json:"id"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	// DisplayName The display name of the user.
	DisplayName string `json:"displayName"`

	// Id The uuid of the user.
	Id string `json:"id"`

	// Name The name of the user.
	Name string `json:"name"`
}

// FieldError defines model for FieldError.
type FieldError struct {
	Errors *[]ErrField `json:"errors,omitempty"`
}

// GenericBadRequest defines model for GenericBadRequest.
type GenericBadRequest = ErrGeneric

// GenericNotFound defines model for GenericNotFound.
type GenericNotFound = ErrGeneric

// DeleteRbacEndpointJSONBody defines parameters for DeleteRbacEndpoint.
type DeleteRbacEndpointJSONBody struct {
	// Endpoint The endpoint to remove from its resource group.
	Endpoint string `json:"endpoint"`

	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// GetRbacEndpointJSONBody defines parameters for GetRbacEndpoint.
type GetRbacEndpointJSONBody struct {
	// Endpoint The endpoint to query.
	Endpoint string `json:"endpoint"`
}

// PostRbacEndpointJSONBody defines parameters for PostRbacEndpoint.
type PostRbacEndpointJSONBody struct {
	// Endpoint The endpoint to assign to the resource group.
	Endpoint string `json:"endpoint"`

	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// DeleteRbacResourceGroupJSONBody defines parameters for DeleteRbacResourceGroup.
type DeleteRbacResourceGroupJSONBody struct {
	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// GetRbacResourceGroupJSONBody defines parameters for GetRbacResourceGroup.
type GetRbacResourceGroupJSONBody struct {
	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// HeadRbacResourceGroupJSONBody defines parameters for HeadRbacResourceGroup.
type HeadRbacResourceGroupJSONBody struct {
	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// PostRbacResourceGroupJSONBody defines parameters for PostRbacResourceGroup.
type PostRbacResourceGroupJSONBody struct {
	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// DeleteRbacUserJSONBody defines parameters for DeleteRbacUser.
type DeleteRbacUserJSONBody struct {
	// Role The name of the role to remove from the user.
	Role string `json:"role"`

	// UserId The uuid of the user.
	UserId string `json:"userId"`
}

// PostRbacUserJSONBody defines parameters for PostRbacUser.
type PostRbacUserJSONBody struct {
	// Role The name of the role to assign to the user.
	Role string `json:"role"`

	// UserId The uuid of the user.
	UserId string `json:"userId"`
}

// DeleteRbacEndpointJSONRequestBody defines body for DeleteRbacEndpoint for application/json ContentType.
type DeleteRbacEndpointJSONRequestBody DeleteRbacEndpointJSONBody

// GetRbacEndpointJSONRequestBody defines body for GetRbacEndpoint for application/json ContentType.
type GetRbacEndpointJSONRequestBody GetRbacEndpointJSONBody

// PostRbacEndpointJSONRequestBody defines body for PostRbacEndpoint for application/json ContentType.
type PostRbacEndpointJSONRequestBody PostRbacEndpointJSONBody

// DeleteRbacPolicyJSONRequestBody defines body for DeleteRbacPolicy for application/json ContentType.
type DeleteRbacPolicyJSONRequestBody = RBACPolicy

// PostRbacPolicyJSONRequestBody defines body for PostRbacPolicy for application/json ContentType.
type PostRbacPolicyJSONRequestBody = RBACPolicy

// DeleteRbacResourceGroupJSONRequestBody defines body for DeleteRbacResourceGroup for application/json ContentType.
type DeleteRbacResourceGroupJSONRequestBody DeleteRbacResourceGroupJSONBody

// GetRbacResourceGroupJSONRequestBody defines body for GetRbacResourceGroup for application/json ContentType.
type GetRbacResourceGroupJSONRequestBody GetRbacResourceGroupJSONBody

// HeadRbacResourceGroupJSONRequestBody defines body for HeadRbacResourceGroup for application/json ContentType.
type HeadRbacResourceGroupJSONRequestBody HeadRbacResourceGroupJSONBody

// PostRbacResourceGroupJSONRequestBody defines body for PostRbacResourceGroup for application/json ContentType.
type PostRbacResourceGroupJSONRequestBody PostRbacResourceGroupJSONBody

// DeleteRbacRoleJSONRequestBody defines body for DeleteRbacRole for application/json ContentType.
type DeleteRbacRoleJSONRequestBody = RBACRole

// GetRbacRoleJSONRequestBody defines body for GetRbacRole for application/json ContentType.
type GetRbacRoleJSONRequestBody = RBACRole

// HeadRbacRoleJSONRequestBody defines body for HeadRbacRole for application/json ContentType.
type HeadRbacRoleJSONRequestBody = RBACRole

// PostRbacRoleJSONRequestBody defines body for PostRbacRole for application/json ContentType.
type PostRbacRoleJSONRequestBody = RBACRole

// DeleteRbacUserJSONRequestBody defines body for DeleteRbacUser for application/json ContentType.
type DeleteRbacUserJSONRequestBody DeleteRbacUserJSONBody

// GetRbacUserJSONRequestBody defines body for GetRbacUser for application/json ContentType.
type GetRbacUserJSONRequestBody = RBACUserRolesRequest

// PostRbacUserJSONRequestBody defines body for PostRbacUser for application/json ContentType.
type PostRbacUserJSONRequestBody PostRbacUserJSONBody

// PatchUsersMeJSONRequestBody defines body for PatchUsersMe for application/json ContentType.
type PatchUsersMeJSONRequestBody = PatchMe

// DeleteUsersUserJSONRequestBody defines body for DeleteUsersUser for application/json ContentType.
type DeleteUsersUserJSONRequestBody = UserRequest

// GetUsersUserJSONRequestBody defines body for GetUsersUser for application/json ContentType.
type GetUsersUserJSONRequestBody = UserRequest

// HeadUsersUserJSONRequestBody defines body for HeadUsersUser for application/json ContentType.
type HeadUsersUserJSONRequestBody = UserRequest

// PatchUsersUserJSONRequestBody defines body for PatchUsersUser for application/json ContentType.
type PatchUsersUserJSONRequestBody = PatchUser

// PostUsersUserJSONRequestBody defines body for PostUsersUser for application/json ContentType.
type PostUsersUserJSONRequestBody = CreateUser

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Remove Endpoint from Resource Group
	// (DELETE /rbac/endpoint)
	DeleteRbacEndpoint(c *gin.Context)
	// Get Resource Group Assigned to Endpoint
	// (GET /rbac/endpoint)
	GetRbacEndpoint(c *gin.Context)
	// Assign Endpoint to Resource Group
	// (POST /rbac/endpoint)
	PostRbacEndpoint(c *gin.Context)
	// List All Resource Groups
	// (GET /rbac/list-resource-groups)
	GetRbacListResourceGroups(c *gin.Context)
	// List All Roles
	// (GET /rbac/list-roles)
	GetRbacListRoles(c *gin.Context)
	// Delete RBAC Policy
	// (DELETE /rbac/policy)
	DeleteRbacPolicy(c *gin.Context)
	// List All RBAC Policies
	// (GET /rbac/policy)
	GetRbacPolicy(c *gin.Context)
	// Create New RBAC Policy
	// (POST /rbac/policy)
	PostRbacPolicy(c *gin.Context)
	// Delete Resource Group
	// (DELETE /rbac/resource-group)
	DeleteRbacResourceGroup(c *gin.Context)
	// Get Endpoints Assigned to Resource Group
	// (GET /rbac/resource-group)
	GetRbacResourceGroup(c *gin.Context)
	// Check Resource Group Existence
	// (HEAD /rbac/resource-group)
	HeadRbacResourceGroup(c *gin.Context)
	// Create New Resource Group
	// (POST /rbac/resource-group)
	PostRbacResourceGroup(c *gin.Context)
	// Delete Role
	// (DELETE /rbac/role)
	DeleteRbacRole(c *gin.Context)
	// Get assigned users for role
	// (GET /rbac/role)
	GetRbacRole(c *gin.Context)
	// Check Role Existence
	// (HEAD /rbac/role)
	HeadRbacRole(c *gin.Context)
	// Create New Role
	// (POST /rbac/role)
	PostRbacRole(c *gin.Context)
	// Remove Role from User
	// (DELETE /rbac/user)
	DeleteRbacUser(c *gin.Context)
	// Get Roles Assigned to User
	// (GET /rbac/user)
	GetRbacUser(c *gin.Context)
	// Assign Roles to User
	// (POST /rbac/user)
	PostRbacUser(c *gin.Context)
	// List All Users
	// (GET /users/list)
	GetUsersList(c *gin.Context)
	// Get Current User Information
	// (GET /users/me)
	GetUsersMe(c *gin.Context)
	// Update Current User Information
	// (PATCH /users/me)
	PatchUsersMe(c *gin.Context)
	// Delete User
	// (DELETE /users/user)
	DeleteUsersUser(c *gin.Context)
	// Get User Information
	// (GET /users/user)
	GetUsersUser(c *gin.Context)
	// Check User Existence
	// (HEAD /users/user)
	HeadUsersUser(c *gin.Context)
	// Update User Information
	// (PATCH /users/user)
	PatchUsersUser(c *gin.Context)
	// Create New User
	// (POST /users/user)
	PostUsersUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteRbacEndpoint operation middleware
func (siw *ServerInterfaceWrapper) DeleteRbacEndpoint(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRbacEndpoint(c)
}

// GetRbacEndpoint operation middleware
func (siw *ServerInterfaceWrapper) GetRbacEndpoint(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRbacEndpoint(c)
}

// PostRbacEndpoint operation middleware
func (siw *ServerInterfaceWrapper) PostRbacEndpoint(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRbacEndpoint(c)
}

// GetRbacListResourceGroups operation middleware
func (siw *ServerInterfaceWrapper) GetRbacListResourceGroups(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRbacListResourceGroups(c)
}

// GetRbacListRoles operation middleware
func (siw *ServerInterfaceWrapper) GetRbacListRoles(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRbacListRoles(c)
}

// DeleteRbacPolicy operation middleware
func (siw *ServerInterfaceWrapper) DeleteRbacPolicy(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRbacPolicy(c)
}

// GetRbacPolicy operation middleware
func (siw *ServerInterfaceWrapper) GetRbacPolicy(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRbacPolicy(c)
}

// PostRbacPolicy operation middleware
func (siw *ServerInterfaceWrapper) PostRbacPolicy(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRbacPolicy(c)
}

// DeleteRbacResourceGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteRbacResourceGroup(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRbacResourceGroup(c)
}

// GetRbacResourceGroup operation middleware
func (siw *ServerInterfaceWrapper) GetRbacResourceGroup(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRbacResourceGroup(c)
}

// HeadRbacResourceGroup operation middleware
func (siw *ServerInterfaceWrapper) HeadRbacResourceGroup(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HeadRbacResourceGroup(c)
}

// PostRbacResourceGroup operation middleware
func (siw *ServerInterfaceWrapper) PostRbacResourceGroup(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRbacResourceGroup(c)
}

// DeleteRbacRole operation middleware
func (siw *ServerInterfaceWrapper) DeleteRbacRole(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRbacRole(c)
}

// GetRbacRole operation middleware
func (siw *ServerInterfaceWrapper) GetRbacRole(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRbacRole(c)
}

// HeadRbacRole operation middleware
func (siw *ServerInterfaceWrapper) HeadRbacRole(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HeadRbacRole(c)
}

// PostRbacRole operation middleware
func (siw *ServerInterfaceWrapper) PostRbacRole(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRbacRole(c)
}

// DeleteRbacUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteRbacUser(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRbacUser(c)
}

// GetRbacUser operation middleware
func (siw *ServerInterfaceWrapper) GetRbacUser(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRbacUser(c)
}

// PostRbacUser operation middleware
func (siw *ServerInterfaceWrapper) PostRbacUser(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRbacUser(c)
}

// GetUsersList operation middleware
func (siw *ServerInterfaceWrapper) GetUsersList(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersList(c)
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersMe(c)
}

// PatchUsersMe operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersMe(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchUsersMe(c)
}

// DeleteUsersUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUser(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersUser(c)
}

// GetUsersUser operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUser(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUser(c)
}

// HeadUsersUser operation middleware
func (siw *ServerInterfaceWrapper) HeadUsersUser(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HeadUsersUser(c)
}

// PatchUsersUser operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersUser(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchUsersUser(c)
}

// PostUsersUser operation middleware
func (siw *ServerInterfaceWrapper) PostUsersUser(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsersUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/rbac/endpoint", wrapper.DeleteRbacEndpoint)
	router.GET(options.BaseURL+"/rbac/endpoint", wrapper.GetRbacEndpoint)
	router.POST(options.BaseURL+"/rbac/endpoint", wrapper.PostRbacEndpoint)
	router.GET(options.BaseURL+"/rbac/list-resource-groups", wrapper.GetRbacListResourceGroups)
	router.GET(options.BaseURL+"/rbac/list-roles", wrapper.GetRbacListRoles)
	router.DELETE(options.BaseURL+"/rbac/policy", wrapper.DeleteRbacPolicy)
	router.GET(options.BaseURL+"/rbac/policy", wrapper.GetRbacPolicy)
	router.POST(options.BaseURL+"/rbac/policy", wrapper.PostRbacPolicy)
	router.DELETE(options.BaseURL+"/rbac/resource-group", wrapper.DeleteRbacResourceGroup)
	router.GET(options.BaseURL+"/rbac/resource-group", wrapper.GetRbacResourceGroup)
	router.HEAD(options.BaseURL+"/rbac/resource-group", wrapper.HeadRbacResourceGroup)
	router.POST(options.BaseURL+"/rbac/resource-group", wrapper.PostRbacResourceGroup)
	router.DELETE(options.BaseURL+"/rbac/role", wrapper.DeleteRbacRole)
	router.GET(options.BaseURL+"/rbac/role", wrapper.GetRbacRole)
	router.HEAD(options.BaseURL+"/rbac/role", wrapper.HeadRbacRole)
	router.POST(options.BaseURL+"/rbac/role", wrapper.PostRbacRole)
	router.DELETE(options.BaseURL+"/rbac/user", wrapper.DeleteRbacUser)
	router.GET(options.BaseURL+"/rbac/user", wrapper.GetRbacUser)
	router.POST(options.BaseURL+"/rbac/user", wrapper.PostRbacUser)
	router.GET(options.BaseURL+"/users/list", wrapper.GetUsersList)
	router.GET(options.BaseURL+"/users/me", wrapper.GetUsersMe)
	router.PATCH(options.BaseURL+"/users/me", wrapper.PatchUsersMe)
	router.DELETE(options.BaseURL+"/users/user", wrapper.DeleteUsersUser)
	router.GET(options.BaseURL+"/users/user", wrapper.GetUsersUser)
	router.HEAD(options.BaseURL+"/users/user", wrapper.HeadUsersUser)
	router.PATCH(options.BaseURL+"/users/user", wrapper.PatchUsersUser)
	router.POST(options.BaseURL+"/users/user", wrapper.PostUsersUser)
}

type FieldErrorJSONResponse struct {
	Errors *[]ErrField `json:"errors,omitempty"`
}

type GenericBadRequestJSONResponse ErrGeneric

type GenericForbiddenResponse struct {
}

type GenericInternalServerErrorResponse struct {
}

type GenericNotFoundJSONResponse ErrGeneric

type GenericUnauthenticatedResponse struct {
}

type DeleteRbacEndpointRequestObject struct {
	Body *DeleteRbacEndpointJSONRequestBody
}

type DeleteRbacEndpointResponseObject interface {
	VisitDeleteRbacEndpointResponse(w http.ResponseWriter) error
}

type DeleteRbacEndpoint200Response struct {
}

func (response DeleteRbacEndpoint200Response) VisitDeleteRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRbacEndpoint400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response DeleteRbacEndpoint400JSONResponse) VisitDeleteRbacEndpointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRbacEndpoint401Response = GenericUnauthenticatedResponse

func (response DeleteRbacEndpoint401Response) VisitDeleteRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteRbacEndpoint403Response = GenericForbiddenResponse

func (response DeleteRbacEndpoint403Response) VisitDeleteRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteRbacEndpoint404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response DeleteRbacEndpoint404JSONResponse) VisitDeleteRbacEndpointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRbacEndpoint500Response = GenericInternalServerErrorResponse

func (response DeleteRbacEndpoint500Response) VisitDeleteRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetRbacEndpointRequestObject struct {
	Body *GetRbacEndpointJSONRequestBody
}

type GetRbacEndpointResponseObject interface {
	VisitGetRbacEndpointResponse(w http.ResponseWriter) error
}

type GetRbacEndpoint200JSONResponse []string

func (response GetRbacEndpoint200JSONResponse) VisitGetRbacEndpointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacEndpoint400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response GetRbacEndpoint400JSONResponse) VisitGetRbacEndpointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacEndpoint401Response = GenericUnauthenticatedResponse

func (response GetRbacEndpoint401Response) VisitGetRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetRbacEndpoint403Response = GenericForbiddenResponse

func (response GetRbacEndpoint403Response) VisitGetRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetRbacEndpoint500Response = GenericInternalServerErrorResponse

func (response GetRbacEndpoint500Response) VisitGetRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostRbacEndpointRequestObject struct {
	Body *PostRbacEndpointJSONRequestBody
}

type PostRbacEndpointResponseObject interface {
	VisitPostRbacEndpointResponse(w http.ResponseWriter) error
}

type PostRbacEndpoint201Response struct {
}

func (response PostRbacEndpoint201Response) VisitPostRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostRbacEndpoint400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response PostRbacEndpoint400JSONResponse) VisitPostRbacEndpointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRbacEndpoint401Response = GenericUnauthenticatedResponse

func (response PostRbacEndpoint401Response) VisitPostRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostRbacEndpoint403Response = GenericForbiddenResponse

func (response PostRbacEndpoint403Response) VisitPostRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostRbacEndpoint404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response PostRbacEndpoint404JSONResponse) VisitPostRbacEndpointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostRbacEndpoint500Response = GenericInternalServerErrorResponse

func (response PostRbacEndpoint500Response) VisitPostRbacEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetRbacListResourceGroupsRequestObject struct {
}

type GetRbacListResourceGroupsResponseObject interface {
	VisitGetRbacListResourceGroupsResponse(w http.ResponseWriter) error
}

type GetRbacListResourceGroups200JSONResponse []string

func (response GetRbacListResourceGroups200JSONResponse) VisitGetRbacListResourceGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacListResourceGroups401Response = GenericUnauthenticatedResponse

func (response GetRbacListResourceGroups401Response) VisitGetRbacListResourceGroupsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetRbacListResourceGroups403Response = GenericForbiddenResponse

func (response GetRbacListResourceGroups403Response) VisitGetRbacListResourceGroupsResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetRbacListResourceGroups500Response = GenericInternalServerErrorResponse

func (response GetRbacListResourceGroups500Response) VisitGetRbacListResourceGroupsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetRbacListRolesRequestObject struct {
}

type GetRbacListRolesResponseObject interface {
	VisitGetRbacListRolesResponse(w http.ResponseWriter) error
}

type GetRbacListRoles200JSONResponse []string

func (response GetRbacListRoles200JSONResponse) VisitGetRbacListRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacListRoles401Response = GenericUnauthenticatedResponse

func (response GetRbacListRoles401Response) VisitGetRbacListRolesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetRbacListRoles403Response = GenericForbiddenResponse

func (response GetRbacListRoles403Response) VisitGetRbacListRolesResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetRbacListRoles500Response = GenericInternalServerErrorResponse

func (response GetRbacListRoles500Response) VisitGetRbacListRolesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteRbacPolicyRequestObject struct {
	Body *DeleteRbacPolicyJSONRequestBody
}

type DeleteRbacPolicyResponseObject interface {
	VisitDeleteRbacPolicyResponse(w http.ResponseWriter) error
}

type DeleteRbacPolicy200Response struct {
}

func (response DeleteRbacPolicy200Response) VisitDeleteRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRbacPolicy400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response DeleteRbacPolicy400JSONResponse) VisitDeleteRbacPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRbacPolicy401Response = GenericUnauthenticatedResponse

func (response DeleteRbacPolicy401Response) VisitDeleteRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteRbacPolicy403Response = GenericForbiddenResponse

func (response DeleteRbacPolicy403Response) VisitDeleteRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteRbacPolicy500Response = GenericInternalServerErrorResponse

func (response DeleteRbacPolicy500Response) VisitDeleteRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetRbacPolicyRequestObject struct {
}

type GetRbacPolicyResponseObject interface {
	VisitGetRbacPolicyResponse(w http.ResponseWriter) error
}

type GetRbacPolicy200JSONResponse []RBACPolicy

func (response GetRbacPolicy200JSONResponse) VisitGetRbacPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacPolicy401Response = GenericUnauthenticatedResponse

func (response GetRbacPolicy401Response) VisitGetRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetRbacPolicy403Response = GenericForbiddenResponse

func (response GetRbacPolicy403Response) VisitGetRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetRbacPolicy500Response = GenericInternalServerErrorResponse

func (response GetRbacPolicy500Response) VisitGetRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostRbacPolicyRequestObject struct {
	Body *PostRbacPolicyJSONRequestBody
}

type PostRbacPolicyResponseObject interface {
	VisitPostRbacPolicyResponse(w http.ResponseWriter) error
}

type PostRbacPolicy201Response struct {
}

func (response PostRbacPolicy201Response) VisitPostRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostRbacPolicy400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response PostRbacPolicy400JSONResponse) VisitPostRbacPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRbacPolicy401Response = GenericUnauthenticatedResponse

func (response PostRbacPolicy401Response) VisitPostRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostRbacPolicy403Response = GenericForbiddenResponse

func (response PostRbacPolicy403Response) VisitPostRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostRbacPolicy404JSONResponse struct{ FieldErrorJSONResponse }

func (response PostRbacPolicy404JSONResponse) VisitPostRbacPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostRbacPolicy500Response = GenericInternalServerErrorResponse

func (response PostRbacPolicy500Response) VisitPostRbacPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteRbacResourceGroupRequestObject struct {
	Body *DeleteRbacResourceGroupJSONRequestBody
}

type DeleteRbacResourceGroupResponseObject interface {
	VisitDeleteRbacResourceGroupResponse(w http.ResponseWriter) error
}

type DeleteRbacResourceGroup200Response struct {
}

func (response DeleteRbacResourceGroup200Response) VisitDeleteRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRbacResourceGroup400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response DeleteRbacResourceGroup400JSONResponse) VisitDeleteRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRbacResourceGroup401Response = GenericUnauthenticatedResponse

func (response DeleteRbacResourceGroup401Response) VisitDeleteRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteRbacResourceGroup403Response = GenericForbiddenResponse

func (response DeleteRbacResourceGroup403Response) VisitDeleteRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteRbacResourceGroup404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response DeleteRbacResourceGroup404JSONResponse) VisitDeleteRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRbacResourceGroup500Response = GenericInternalServerErrorResponse

func (response DeleteRbacResourceGroup500Response) VisitDeleteRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetRbacResourceGroupRequestObject struct {
	Body *GetRbacResourceGroupJSONRequestBody
}

type GetRbacResourceGroupResponseObject interface {
	VisitGetRbacResourceGroupResponse(w http.ResponseWriter) error
}

type GetRbacResourceGroup200JSONResponse []string

func (response GetRbacResourceGroup200JSONResponse) VisitGetRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacResourceGroup400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response GetRbacResourceGroup400JSONResponse) VisitGetRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacResourceGroup401Response = GenericUnauthenticatedResponse

func (response GetRbacResourceGroup401Response) VisitGetRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetRbacResourceGroup403Response = GenericForbiddenResponse

func (response GetRbacResourceGroup403Response) VisitGetRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetRbacResourceGroup404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response GetRbacResourceGroup404JSONResponse) VisitGetRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacResourceGroup500Response = GenericInternalServerErrorResponse

func (response GetRbacResourceGroup500Response) VisitGetRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type HeadRbacResourceGroupRequestObject struct {
	Body *HeadRbacResourceGroupJSONRequestBody
}

type HeadRbacResourceGroupResponseObject interface {
	VisitHeadRbacResourceGroupResponse(w http.ResponseWriter) error
}

type HeadRbacResourceGroup200Response struct {
}

func (response HeadRbacResourceGroup200Response) VisitHeadRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HeadRbacResourceGroup400Response struct {
}

func (response HeadRbacResourceGroup400Response) VisitHeadRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type HeadRbacResourceGroup401Response struct {
}

func (response HeadRbacResourceGroup401Response) VisitHeadRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type HeadRbacResourceGroup403Response struct {
}

func (response HeadRbacResourceGroup403Response) VisitHeadRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type HeadRbacResourceGroup404Response struct {
}

func (response HeadRbacResourceGroup404Response) VisitHeadRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HeadRbacResourceGroup500Response struct {
}

func (response HeadRbacResourceGroup500Response) VisitHeadRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostRbacResourceGroupRequestObject struct {
	Body *PostRbacResourceGroupJSONRequestBody
}

type PostRbacResourceGroupResponseObject interface {
	VisitPostRbacResourceGroupResponse(w http.ResponseWriter) error
}

type PostRbacResourceGroup201Response struct {
}

func (response PostRbacResourceGroup201Response) VisitPostRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostRbacResourceGroup400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response PostRbacResourceGroup400JSONResponse) VisitPostRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRbacResourceGroup401Response = GenericUnauthenticatedResponse

func (response PostRbacResourceGroup401Response) VisitPostRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostRbacResourceGroup403Response = GenericForbiddenResponse

func (response PostRbacResourceGroup403Response) VisitPostRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostRbacResourceGroup409JSONResponse ErrGeneric

func (response PostRbacResourceGroup409JSONResponse) VisitPostRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostRbacResourceGroup500Response = GenericInternalServerErrorResponse

func (response PostRbacResourceGroup500Response) VisitPostRbacResourceGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteRbacRoleRequestObject struct {
	Body *DeleteRbacRoleJSONRequestBody
}

type DeleteRbacRoleResponseObject interface {
	VisitDeleteRbacRoleResponse(w http.ResponseWriter) error
}

type DeleteRbacRole200Response struct {
}

func (response DeleteRbacRole200Response) VisitDeleteRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRbacRole400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response DeleteRbacRole400JSONResponse) VisitDeleteRbacRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRbacRole401Response = GenericUnauthenticatedResponse

func (response DeleteRbacRole401Response) VisitDeleteRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteRbacRole403Response = GenericForbiddenResponse

func (response DeleteRbacRole403Response) VisitDeleteRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteRbacRole404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response DeleteRbacRole404JSONResponse) VisitDeleteRbacRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRbacRole409JSONResponse ErrGeneric

func (response DeleteRbacRole409JSONResponse) VisitDeleteRbacRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRbacRole500Response = GenericInternalServerErrorResponse

func (response DeleteRbacRole500Response) VisitDeleteRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetRbacRoleRequestObject struct {
	Body *GetRbacRoleJSONRequestBody
}

type GetRbacRoleResponseObject interface {
	VisitGetRbacRoleResponse(w http.ResponseWriter) error
}

type GetRbacRole200JSONResponse []string

func (response GetRbacRole200JSONResponse) VisitGetRbacRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacRole400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response GetRbacRole400JSONResponse) VisitGetRbacRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacRole401Response = GenericUnauthenticatedResponse

func (response GetRbacRole401Response) VisitGetRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetRbacRole403Response = GenericForbiddenResponse

func (response GetRbacRole403Response) VisitGetRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetRbacRole404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response GetRbacRole404JSONResponse) VisitGetRbacRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacRole500Response = GenericInternalServerErrorResponse

func (response GetRbacRole500Response) VisitGetRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type HeadRbacRoleRequestObject struct {
	Body *HeadRbacRoleJSONRequestBody
}

type HeadRbacRoleResponseObject interface {
	VisitHeadRbacRoleResponse(w http.ResponseWriter) error
}

type HeadRbacRole200Response struct {
}

func (response HeadRbacRole200Response) VisitHeadRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HeadRbacRole400Response struct {
}

func (response HeadRbacRole400Response) VisitHeadRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type HeadRbacRole401Response struct {
}

func (response HeadRbacRole401Response) VisitHeadRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type HeadRbacRole403Response struct {
}

func (response HeadRbacRole403Response) VisitHeadRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type HeadRbacRole404Response struct {
}

func (response HeadRbacRole404Response) VisitHeadRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HeadRbacRole500Response struct {
}

func (response HeadRbacRole500Response) VisitHeadRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostRbacRoleRequestObject struct {
	Body *PostRbacRoleJSONRequestBody
}

type PostRbacRoleResponseObject interface {
	VisitPostRbacRoleResponse(w http.ResponseWriter) error
}

type PostRbacRole201Response struct {
}

func (response PostRbacRole201Response) VisitPostRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostRbacRole400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response PostRbacRole400JSONResponse) VisitPostRbacRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRbacRole401Response = GenericUnauthenticatedResponse

func (response PostRbacRole401Response) VisitPostRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostRbacRole403Response = GenericForbiddenResponse

func (response PostRbacRole403Response) VisitPostRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostRbacRole409JSONResponse ErrGeneric

func (response PostRbacRole409JSONResponse) VisitPostRbacRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostRbacRole500Response = GenericInternalServerErrorResponse

func (response PostRbacRole500Response) VisitPostRbacRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteRbacUserRequestObject struct {
	Body *DeleteRbacUserJSONRequestBody
}

type DeleteRbacUserResponseObject interface {
	VisitDeleteRbacUserResponse(w http.ResponseWriter) error
}

type DeleteRbacUser200Response struct {
}

func (response DeleteRbacUser200Response) VisitDeleteRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRbacUser400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response DeleteRbacUser400JSONResponse) VisitDeleteRbacUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRbacUser401Response = GenericUnauthenticatedResponse

func (response DeleteRbacUser401Response) VisitDeleteRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteRbacUser403Response = GenericForbiddenResponse

func (response DeleteRbacUser403Response) VisitDeleteRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteRbacUser404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response DeleteRbacUser404JSONResponse) VisitDeleteRbacUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRbacUser500Response = GenericInternalServerErrorResponse

func (response DeleteRbacUser500Response) VisitDeleteRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetRbacUserRequestObject struct {
	Body *GetRbacUserJSONRequestBody
}

type GetRbacUserResponseObject interface {
	VisitGetRbacUserResponse(w http.ResponseWriter) error
}

type GetRbacUser200JSONResponse []string

func (response GetRbacUser200JSONResponse) VisitGetRbacUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacUser400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response GetRbacUser400JSONResponse) VisitGetRbacUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacUser401Response = GenericUnauthenticatedResponse

func (response GetRbacUser401Response) VisitGetRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetRbacUser403Response = GenericForbiddenResponse

func (response GetRbacUser403Response) VisitGetRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetRbacUser404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response GetRbacUser404JSONResponse) VisitGetRbacUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRbacUser500Response = GenericInternalServerErrorResponse

func (response GetRbacUser500Response) VisitGetRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostRbacUserRequestObject struct {
	Body *PostRbacUserJSONRequestBody
}

type PostRbacUserResponseObject interface {
	VisitPostRbacUserResponse(w http.ResponseWriter) error
}

type PostRbacUser201Response struct {
}

func (response PostRbacUser201Response) VisitPostRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostRbacUser400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response PostRbacUser400JSONResponse) VisitPostRbacUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRbacUser401Response = GenericUnauthenticatedResponse

func (response PostRbacUser401Response) VisitPostRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostRbacUser403Response = GenericForbiddenResponse

func (response PostRbacUser403Response) VisitPostRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostRbacUser404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response PostRbacUser404JSONResponse) VisitPostRbacUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostRbacUser500Response = GenericInternalServerErrorResponse

func (response PostRbacUser500Response) VisitPostRbacUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetUsersListRequestObject struct {
}

type GetUsersListResponseObject interface {
	VisitGetUsersListResponse(w http.ResponseWriter) error
}

type GetUsersList200JSONResponse []UserResponse

func (response GetUsersList200JSONResponse) VisitGetUsersListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersList401Response = GenericUnauthenticatedResponse

func (response GetUsersList401Response) VisitGetUsersListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetUsersList403Response = GenericForbiddenResponse

func (response GetUsersList403Response) VisitGetUsersListResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetUsersList500Response = GenericInternalServerErrorResponse

func (response GetUsersList500Response) VisitGetUsersListResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetUsersMeRequestObject struct {
}

type GetUsersMeResponseObject interface {
	VisitGetUsersMeResponse(w http.ResponseWriter) error
}

type GetUsersMe200JSONResponse UserResponse

func (response GetUsersMe200JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMe401Response = GenericUnauthenticatedResponse

func (response GetUsersMe401Response) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetUsersMe403Response = GenericForbiddenResponse

func (response GetUsersMe403Response) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetUsersMe500Response = GenericInternalServerErrorResponse

func (response GetUsersMe500Response) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PatchUsersMeRequestObject struct {
	Body *PatchUsersMeJSONRequestBody
}

type PatchUsersMeResponseObject interface {
	VisitPatchUsersMeResponse(w http.ResponseWriter) error
}

type PatchUsersMe200JSONResponse UserResponse

func (response PatchUsersMe200JSONResponse) VisitPatchUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersMe400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response PatchUsersMe400JSONResponse) VisitPatchUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersMe401Response = GenericUnauthenticatedResponse

func (response PatchUsersMe401Response) VisitPatchUsersMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PatchUsersMe403Response = GenericForbiddenResponse

func (response PatchUsersMe403Response) VisitPatchUsersMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PatchUsersMe409JSONResponse ErrGeneric

func (response PatchUsersMe409JSONResponse) VisitPatchUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersMe500Response = GenericInternalServerErrorResponse

func (response PatchUsersMe500Response) VisitPatchUsersMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteUsersUserRequestObject struct {
	Body *DeleteUsersUserJSONRequestBody
}

type DeleteUsersUserResponseObject interface {
	VisitDeleteUsersUserResponse(w http.ResponseWriter) error
}

type DeleteUsersUser200JSONResponse UserResponse

func (response DeleteUsersUser200JSONResponse) VisitDeleteUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersUser400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response DeleteUsersUser400JSONResponse) VisitDeleteUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersUser401Response = GenericUnauthenticatedResponse

func (response DeleteUsersUser401Response) VisitDeleteUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteUsersUser403Response = GenericForbiddenResponse

func (response DeleteUsersUser403Response) VisitDeleteUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteUsersUser404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response DeleteUsersUser404JSONResponse) VisitDeleteUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersUser500Response = GenericInternalServerErrorResponse

func (response DeleteUsersUser500Response) VisitDeleteUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetUsersUserRequestObject struct {
	Body *GetUsersUserJSONRequestBody
}

type GetUsersUserResponseObject interface {
	VisitGetUsersUserResponse(w http.ResponseWriter) error
}

type GetUsersUser200JSONResponse UserResponse

func (response GetUsersUser200JSONResponse) VisitGetUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUser400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response GetUsersUser400JSONResponse) VisitGetUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUser401Response = GenericUnauthenticatedResponse

func (response GetUsersUser401Response) VisitGetUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetUsersUser403Response = GenericForbiddenResponse

func (response GetUsersUser403Response) VisitGetUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetUsersUser404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response GetUsersUser404JSONResponse) VisitGetUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUser500Response = GenericInternalServerErrorResponse

func (response GetUsersUser500Response) VisitGetUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type HeadUsersUserRequestObject struct {
	Body *HeadUsersUserJSONRequestBody
}

type HeadUsersUserResponseObject interface {
	VisitHeadUsersUserResponse(w http.ResponseWriter) error
}

type HeadUsersUser200Response struct {
}

func (response HeadUsersUser200Response) VisitHeadUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HeadUsersUser400Response struct {
}

func (response HeadUsersUser400Response) VisitHeadUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type HeadUsersUser401Response struct {
}

func (response HeadUsersUser401Response) VisitHeadUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type HeadUsersUser403Response struct {
}

func (response HeadUsersUser403Response) VisitHeadUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type HeadUsersUser404Response struct {
}

func (response HeadUsersUser404Response) VisitHeadUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HeadUsersUser500Response struct {
}

func (response HeadUsersUser500Response) VisitHeadUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PatchUsersUserRequestObject struct {
	Body *PatchUsersUserJSONRequestBody
}

type PatchUsersUserResponseObject interface {
	VisitPatchUsersUserResponse(w http.ResponseWriter) error
}

type PatchUsersUser200JSONResponse UserResponse

func (response PatchUsersUser200JSONResponse) VisitPatchUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersUser400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response PatchUsersUser400JSONResponse) VisitPatchUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersUser401Response = GenericUnauthenticatedResponse

func (response PatchUsersUser401Response) VisitPatchUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PatchUsersUser403Response = GenericForbiddenResponse

func (response PatchUsersUser403Response) VisitPatchUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PatchUsersUser404JSONResponse struct{ GenericNotFoundJSONResponse }

func (response PatchUsersUser404JSONResponse) VisitPatchUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersUser409JSONResponse ErrGeneric

func (response PatchUsersUser409JSONResponse) VisitPatchUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersUser500Response = GenericInternalServerErrorResponse

func (response PatchUsersUser500Response) VisitPatchUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostUsersUserRequestObject struct {
	Body *PostUsersUserJSONRequestBody
}

type PostUsersUserResponseObject interface {
	VisitPostUsersUserResponse(w http.ResponseWriter) error
}

type PostUsersUser201JSONResponse UserResponse

func (response PostUsersUser201JSONResponse) VisitPostUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersUser400JSONResponse struct{ GenericBadRequestJSONResponse }

func (response PostUsersUser400JSONResponse) VisitPostUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersUser401Response = GenericUnauthenticatedResponse

func (response PostUsersUser401Response) VisitPostUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostUsersUser403Response = GenericForbiddenResponse

func (response PostUsersUser403Response) VisitPostUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostUsersUser409JSONResponse ErrGeneric

func (response PostUsersUser409JSONResponse) VisitPostUsersUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersUser500Response = GenericInternalServerErrorResponse

func (response PostUsersUser500Response) VisitPostUsersUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Remove Endpoint from Resource Group
	// (DELETE /rbac/endpoint)
	DeleteRbacEndpoint(ctx context.Context, request DeleteRbacEndpointRequestObject) (DeleteRbacEndpointResponseObject, error)
	// Get Resource Group Assigned to Endpoint
	// (GET /rbac/endpoint)
	GetRbacEndpoint(ctx context.Context, request GetRbacEndpointRequestObject) (GetRbacEndpointResponseObject, error)
	// Assign Endpoint to Resource Group
	// (POST /rbac/endpoint)
	PostRbacEndpoint(ctx context.Context, request PostRbacEndpointRequestObject) (PostRbacEndpointResponseObject, error)
	// List All Resource Groups
	// (GET /rbac/list-resource-groups)
	GetRbacListResourceGroups(ctx context.Context, request GetRbacListResourceGroupsRequestObject) (GetRbacListResourceGroupsResponseObject, error)
	// List All Roles
	// (GET /rbac/list-roles)
	GetRbacListRoles(ctx context.Context, request GetRbacListRolesRequestObject) (GetRbacListRolesResponseObject, error)
	// Delete RBAC Policy
	// (DELETE /rbac/policy)
	DeleteRbacPolicy(ctx context.Context, request DeleteRbacPolicyRequestObject) (DeleteRbacPolicyResponseObject, error)
	// List All RBAC Policies
	// (GET /rbac/policy)
	GetRbacPolicy(ctx context.Context, request GetRbacPolicyRequestObject) (GetRbacPolicyResponseObject, error)
	// Create New RBAC Policy
	// (POST /rbac/policy)
	PostRbacPolicy(ctx context.Context, request PostRbacPolicyRequestObject) (PostRbacPolicyResponseObject, error)
	// Delete Resource Group
	// (DELETE /rbac/resource-group)
	DeleteRbacResourceGroup(ctx context.Context, request DeleteRbacResourceGroupRequestObject) (DeleteRbacResourceGroupResponseObject, error)
	// Get Endpoints Assigned to Resource Group
	// (GET /rbac/resource-group)
	GetRbacResourceGroup(ctx context.Context, request GetRbacResourceGroupRequestObject) (GetRbacResourceGroupResponseObject, error)
	// Check Resource Group Existence
	// (HEAD /rbac/resource-group)
	HeadRbacResourceGroup(ctx context.Context, request HeadRbacResourceGroupRequestObject) (HeadRbacResourceGroupResponseObject, error)
	// Create New Resource Group
	// (POST /rbac/resource-group)
	PostRbacResourceGroup(ctx context.Context, request PostRbacResourceGroupRequestObject) (PostRbacResourceGroupResponseObject, error)
	// Delete Role
	// (DELETE /rbac/role)
	DeleteRbacRole(ctx context.Context, request DeleteRbacRoleRequestObject) (DeleteRbacRoleResponseObject, error)
	// Get assigned users for role
	// (GET /rbac/role)
	GetRbacRole(ctx context.Context, request GetRbacRoleRequestObject) (GetRbacRoleResponseObject, error)
	// Check Role Existence
	// (HEAD /rbac/role)
	HeadRbacRole(ctx context.Context, request HeadRbacRoleRequestObject) (HeadRbacRoleResponseObject, error)
	// Create New Role
	// (POST /rbac/role)
	PostRbacRole(ctx context.Context, request PostRbacRoleRequestObject) (PostRbacRoleResponseObject, error)
	// Remove Role from User
	// (DELETE /rbac/user)
	DeleteRbacUser(ctx context.Context, request DeleteRbacUserRequestObject) (DeleteRbacUserResponseObject, error)
	// Get Roles Assigned to User
	// (GET /rbac/user)
	GetRbacUser(ctx context.Context, request GetRbacUserRequestObject) (GetRbacUserResponseObject, error)
	// Assign Roles to User
	// (POST /rbac/user)
	PostRbacUser(ctx context.Context, request PostRbacUserRequestObject) (PostRbacUserResponseObject, error)
	// List All Users
	// (GET /users/list)
	GetUsersList(ctx context.Context, request GetUsersListRequestObject) (GetUsersListResponseObject, error)
	// Get Current User Information
	// (GET /users/me)
	GetUsersMe(ctx context.Context, request GetUsersMeRequestObject) (GetUsersMeResponseObject, error)
	// Update Current User Information
	// (PATCH /users/me)
	PatchUsersMe(ctx context.Context, request PatchUsersMeRequestObject) (PatchUsersMeResponseObject, error)
	// Delete User
	// (DELETE /users/user)
	DeleteUsersUser(ctx context.Context, request DeleteUsersUserRequestObject) (DeleteUsersUserResponseObject, error)
	// Get User Information
	// (GET /users/user)
	GetUsersUser(ctx context.Context, request GetUsersUserRequestObject) (GetUsersUserResponseObject, error)
	// Check User Existence
	// (HEAD /users/user)
	HeadUsersUser(ctx context.Context, request HeadUsersUserRequestObject) (HeadUsersUserResponseObject, error)
	// Update User Information
	// (PATCH /users/user)
	PatchUsersUser(ctx context.Context, request PatchUsersUserRequestObject) (PatchUsersUserResponseObject, error)
	// Create New User
	// (POST /users/user)
	PostUsersUser(ctx context.Context, request PostUsersUserRequestObject) (PostUsersUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteRbacEndpoint operation middleware
func (sh *strictHandler) DeleteRbacEndpoint(ctx *gin.Context) {
	var request DeleteRbacEndpointRequestObject

	var body DeleteRbacEndpointJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRbacEndpoint(ctx, request.(DeleteRbacEndpointRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRbacEndpoint")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRbacEndpointResponseObject); ok {
		if err := validResponse.VisitDeleteRbacEndpointResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRbacEndpoint operation middleware
func (sh *strictHandler) GetRbacEndpoint(ctx *gin.Context) {
	var request GetRbacEndpointRequestObject

	var body GetRbacEndpointJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRbacEndpoint(ctx, request.(GetRbacEndpointRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRbacEndpoint")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRbacEndpointResponseObject); ok {
		if err := validResponse.VisitGetRbacEndpointResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRbacEndpoint operation middleware
func (sh *strictHandler) PostRbacEndpoint(ctx *gin.Context) {
	var request PostRbacEndpointRequestObject

	var body PostRbacEndpointJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRbacEndpoint(ctx, request.(PostRbacEndpointRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRbacEndpoint")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostRbacEndpointResponseObject); ok {
		if err := validResponse.VisitPostRbacEndpointResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRbacListResourceGroups operation middleware
func (sh *strictHandler) GetRbacListResourceGroups(ctx *gin.Context) {
	var request GetRbacListResourceGroupsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRbacListResourceGroups(ctx, request.(GetRbacListResourceGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRbacListResourceGroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRbacListResourceGroupsResponseObject); ok {
		if err := validResponse.VisitGetRbacListResourceGroupsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRbacListRoles operation middleware
func (sh *strictHandler) GetRbacListRoles(ctx *gin.Context) {
	var request GetRbacListRolesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRbacListRoles(ctx, request.(GetRbacListRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRbacListRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRbacListRolesResponseObject); ok {
		if err := validResponse.VisitGetRbacListRolesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRbacPolicy operation middleware
func (sh *strictHandler) DeleteRbacPolicy(ctx *gin.Context) {
	var request DeleteRbacPolicyRequestObject

	var body DeleteRbacPolicyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRbacPolicy(ctx, request.(DeleteRbacPolicyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRbacPolicy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRbacPolicyResponseObject); ok {
		if err := validResponse.VisitDeleteRbacPolicyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRbacPolicy operation middleware
func (sh *strictHandler) GetRbacPolicy(ctx *gin.Context) {
	var request GetRbacPolicyRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRbacPolicy(ctx, request.(GetRbacPolicyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRbacPolicy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRbacPolicyResponseObject); ok {
		if err := validResponse.VisitGetRbacPolicyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRbacPolicy operation middleware
func (sh *strictHandler) PostRbacPolicy(ctx *gin.Context) {
	var request PostRbacPolicyRequestObject

	var body PostRbacPolicyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRbacPolicy(ctx, request.(PostRbacPolicyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRbacPolicy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostRbacPolicyResponseObject); ok {
		if err := validResponse.VisitPostRbacPolicyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRbacResourceGroup operation middleware
func (sh *strictHandler) DeleteRbacResourceGroup(ctx *gin.Context) {
	var request DeleteRbacResourceGroupRequestObject

	var body DeleteRbacResourceGroupJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRbacResourceGroup(ctx, request.(DeleteRbacResourceGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRbacResourceGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRbacResourceGroupResponseObject); ok {
		if err := validResponse.VisitDeleteRbacResourceGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRbacResourceGroup operation middleware
func (sh *strictHandler) GetRbacResourceGroup(ctx *gin.Context) {
	var request GetRbacResourceGroupRequestObject

	var body GetRbacResourceGroupJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRbacResourceGroup(ctx, request.(GetRbacResourceGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRbacResourceGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRbacResourceGroupResponseObject); ok {
		if err := validResponse.VisitGetRbacResourceGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HeadRbacResourceGroup operation middleware
func (sh *strictHandler) HeadRbacResourceGroup(ctx *gin.Context) {
	var request HeadRbacResourceGroupRequestObject

	var body HeadRbacResourceGroupJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HeadRbacResourceGroup(ctx, request.(HeadRbacResourceGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HeadRbacResourceGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HeadRbacResourceGroupResponseObject); ok {
		if err := validResponse.VisitHeadRbacResourceGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRbacResourceGroup operation middleware
func (sh *strictHandler) PostRbacResourceGroup(ctx *gin.Context) {
	var request PostRbacResourceGroupRequestObject

	var body PostRbacResourceGroupJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRbacResourceGroup(ctx, request.(PostRbacResourceGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRbacResourceGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostRbacResourceGroupResponseObject); ok {
		if err := validResponse.VisitPostRbacResourceGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRbacRole operation middleware
func (sh *strictHandler) DeleteRbacRole(ctx *gin.Context) {
	var request DeleteRbacRoleRequestObject

	var body DeleteRbacRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRbacRole(ctx, request.(DeleteRbacRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRbacRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRbacRoleResponseObject); ok {
		if err := validResponse.VisitDeleteRbacRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRbacRole operation middleware
func (sh *strictHandler) GetRbacRole(ctx *gin.Context) {
	var request GetRbacRoleRequestObject

	var body GetRbacRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRbacRole(ctx, request.(GetRbacRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRbacRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRbacRoleResponseObject); ok {
		if err := validResponse.VisitGetRbacRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HeadRbacRole operation middleware
func (sh *strictHandler) HeadRbacRole(ctx *gin.Context) {
	var request HeadRbacRoleRequestObject

	var body HeadRbacRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HeadRbacRole(ctx, request.(HeadRbacRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HeadRbacRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HeadRbacRoleResponseObject); ok {
		if err := validResponse.VisitHeadRbacRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRbacRole operation middleware
func (sh *strictHandler) PostRbacRole(ctx *gin.Context) {
	var request PostRbacRoleRequestObject

	var body PostRbacRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRbacRole(ctx, request.(PostRbacRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRbacRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostRbacRoleResponseObject); ok {
		if err := validResponse.VisitPostRbacRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRbacUser operation middleware
func (sh *strictHandler) DeleteRbacUser(ctx *gin.Context) {
	var request DeleteRbacUserRequestObject

	var body DeleteRbacUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRbacUser(ctx, request.(DeleteRbacUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRbacUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRbacUserResponseObject); ok {
		if err := validResponse.VisitDeleteRbacUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRbacUser operation middleware
func (sh *strictHandler) GetRbacUser(ctx *gin.Context) {
	var request GetRbacUserRequestObject

	var body GetRbacUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRbacUser(ctx, request.(GetRbacUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRbacUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRbacUserResponseObject); ok {
		if err := validResponse.VisitGetRbacUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRbacUser operation middleware
func (sh *strictHandler) PostRbacUser(ctx *gin.Context) {
	var request PostRbacUserRequestObject

	var body PostRbacUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRbacUser(ctx, request.(PostRbacUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRbacUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostRbacUserResponseObject); ok {
		if err := validResponse.VisitPostRbacUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersList operation middleware
func (sh *strictHandler) GetUsersList(ctx *gin.Context) {
	var request GetUsersListRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersList(ctx, request.(GetUsersListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersListResponseObject); ok {
		if err := validResponse.VisitGetUsersListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersMe operation middleware
func (sh *strictHandler) GetUsersMe(ctx *gin.Context) {
	var request GetUsersMeRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMe(ctx, request.(GetUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersMeResponseObject); ok {
		if err := validResponse.VisitGetUsersMeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchUsersMe operation middleware
func (sh *strictHandler) PatchUsersMe(ctx *gin.Context) {
	var request PatchUsersMeRequestObject

	var body PatchUsersMeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUsersMe(ctx, request.(PatchUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUsersMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchUsersMeResponseObject); ok {
		if err := validResponse.VisitPatchUsersMeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUsersUser operation middleware
func (sh *strictHandler) DeleteUsersUser(ctx *gin.Context) {
	var request DeleteUsersUserRequestObject

	var body DeleteUsersUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersUser(ctx, request.(DeleteUsersUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUsersUserResponseObject); ok {
		if err := validResponse.VisitDeleteUsersUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersUser operation middleware
func (sh *strictHandler) GetUsersUser(ctx *gin.Context) {
	var request GetUsersUserRequestObject

	var body GetUsersUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUser(ctx, request.(GetUsersUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersUserResponseObject); ok {
		if err := validResponse.VisitGetUsersUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HeadUsersUser operation middleware
func (sh *strictHandler) HeadUsersUser(ctx *gin.Context) {
	var request HeadUsersUserRequestObject

	var body HeadUsersUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HeadUsersUser(ctx, request.(HeadUsersUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HeadUsersUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HeadUsersUserResponseObject); ok {
		if err := validResponse.VisitHeadUsersUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchUsersUser operation middleware
func (sh *strictHandler) PatchUsersUser(ctx *gin.Context) {
	var request PatchUsersUserRequestObject

	var body PatchUsersUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUsersUser(ctx, request.(PatchUsersUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUsersUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchUsersUserResponseObject); ok {
		if err := validResponse.VisitPatchUsersUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUsersUser operation middleware
func (sh *strictHandler) PostUsersUser(ctx *gin.Context) {
	var request PostUsersUserRequestObject

	var body PostUsersUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersUser(ctx, request.(PostUsersUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUsersUserResponseObject); ok {
		if err := validResponse.VisitPostUsersUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcSXPbOBb+KyjMHDpdjOxMeg7jm+MoTqrSiUtxTokPMPkkoZsE2ABoj6ZL/30KABdQ",
	"BBdZi2VbJ0syATw8fN/bAOJvHPIk5QyYkvjsbyxAppxJMF8+UIijsRBc6G8hZwqY0h9JmsY0JIpydvKH",
	"5Ez/JsM5JER/SgVPQShqOwHd3nyiChLz4Z8CpvgM/+OkGvvENpcnYyHMsHgZYLVIAZ9hIgRZ4GX1A7/9",
	"A0KFl/qnCGQoaKpFwWf4KwPEBUq4ADTV3Uh0DwIQZXckptFI93oJDAQN35FoAn9lINVak+uRPe/cJ9v1",
	"HJCwI6J7IlFC4ikXCURaYo+AH7i4pVEERoBmVyRTc2BKSwoRyiQIFHGQiHGF5uQOUAoioVJSzpDiiIQh",
	"SIlUJQRESIDkmQjBHfYTUyAYib+BuANRrn5dgHOGaP4ckuZBZNYZ8TDMhIBohD5z/iciyoyYPxLzmUTT",
	"Yn0iUITG0h37C1cfeMai/a+IowyzOFqLUy2KK953VlO6f11Swe9oBJG7QHoNQgGR/kriBiaXQT4dw44L",
	"AUTBdwmiSaaIyjQmiy8kAf/o+QOIkQSMqrX6GdwbgIxwSSGpBGUzPTfW2pfpg09NFwZfiutZEAXejlIi",
	"5T0XbWrJ/ztEqGWA9bJQoXX8w0ro9B/U1HDTMAsBLo2I3xp58Iyc78WcLaIFxIZhipsfjVXxzn9ajNit",
	"SfMYUnOiUEgyqXsuxupXhR0jyKfRMvUC8e2T7x6kvfMrosL579DsmcH9+z5o6gX3wtNYDKY6IAr33d2u",
	"3d1VJ1Z1lw289nS7bFOXn8i0Zegso9Eq57I0auPcRnrfkr63rOdhNoFGXoBO3p1fXPGYhoumyit/2OJQ",
	"45jfQ+T6zV9gNBsF6Ce+HF//xPrD1ddv+adff+JXWk5gWaIluhxf48D8X/85v774iAP8fvx5fD3GAf44",
	"Pn+PA/yrI3WlqMLzXAqepf0WpHRUM/38CP3ChZXH6JDE8coT8pVvdQSPB9h9/ZR3BB6Dr9+VZTKDrE4w",
	"cJeibRUnuXj1NVxD6GGytQ2vWatFkE6MWBdF4/TTQBb3C5P35hPHiNImxTp2RIASFO7gweyyktgEYdPY",
	"pFs7weCJbRjTDNJFUIQg3XGHDuMgzARVi286nLNqeUckDc8zNS+jVt3mVv9ajT1XKrURKmVT7hcdmBKL",
	"lFOmShaOWRjrUP/86lMRyEpEWIRCniQZy0NPM0eqNHOw28JG+DjAdyCsWcR3p6PT0alWIU+BkZTiM/x2",
	"dDp6a+IvNTczOhG3JDwBFhlhrLAxKI/GJ5DwO0CEoeJpNBU8QVSLKSWdMTfutuYMm7GFkVzzC783nU9u",
	"STguhrQrBFK949Fik9y0NoemwnOZDXfMTErpm0Jv2ar34hJcZbgj3Xjz5KqpEhlY8apM/1+np00JC3Xn",
	"k4/s7OtyIpmZxHKaxfHC5Eq/2a58WVk55EkzBzct3wxuuZqKmeZvBzevcmvT8LfBDcsMdRngf68xU19W",
	"7RoMfPajZip+3CxvAiyzJCFiUTFpXKPRpFiKwq8qMpMaG9qD4ZtlgGegfKy0fsADu4qViiOCZAohndKw",
	"pEKTnZegHpmaf2UgFmvwZQN+DJ5LWepqWIWVmlajJvGt5BMqJED3VM37Fks5WhmhcZKqBTKDIDqt1EVt",
	"ZaO2ymzRsD1Pksb7pOMlqBX2oXNHpw4bGpRMufSA2raueco6A/u85BWXj01Ei6oCjI/vIVezjg0twJsO",
	"D+kSqsNBIi5MdZHEAki0KJsdHefOmJoTa+zgtM9tLoM8xI2pVK+L5Xxtc2kteLdXJUi306D1pOKIMlsR",
	"X0gFSas7/UylmrjwlfjwPFI10ZVJjl6KG9DLhM7jeAVSshdTPIb1kaQbrYMfM8hBw0ZL+ALBki9MG0TS",
	"soDZllfblNhEC/+lUlE2M7p8fUskRMVWn15jwWP0i+7/FbK9BjocpMq2g6gr287rqA+PI7o25pxC7UPT",
	"U91FPitkFRU9h2x0n5DMcWQ0WS73mklk00j1w5Bq2reYLgd227BbQ0G4FYNWQZK+SMNW4oj6DFxb7mM3",
	"vBEx+0ED7Vh7AnRQZutNt9myu+nRiymiOQeK9ozRHGNf4L7b2pVOuB72r+uMB5e0Jys56nZy9r0m1lur",
	"N0/qifMz8ulPIVEuYoENa8qVMyzKLbKtqNzHkjwgeNkUOaBMrVFvfhZl46fAzUtQZQVL1irN/XSdA/Fs",
	"pV/MIfxT54KtfLTerLfg8BFIdGRppyOzinTpUX/8HYmK3Xs3Z6g/ZCHPBf1fWS5+23yqRPbIgXa3ly3O",
	"DBspRw6y680++Y77jtaLwQzmVrZNxqYQwUJ4aL4wcF/kxeLzTS8EnlUW8p89nR0/XzWX5SbtjN4Bs8te",
	"7PM4FuCxkp6hex7VCbvObEc/Zg8hdDkHJ88pDgLuJic33T/YXJvg5phu7JE9183DDCHP4sh4olsoFyPK",
	"QEc55bsmArSlDHUv+6dTkSFZKD84L8okiPacKD+66s+EDopEh5GZNLVZnQA+5iM7zEdKldsVmHKBRAsz",
	"1khBtFtZM/E4cM9yaOG/Fmn/Qb8edeNQX3fSg4oy3D8UVLxpWYJj0P2woFvr7sBDba8VLAPsLH8frOfM",
	"fBVgF68ptIXW5gWzrSW0g1+wWT0V3/lCxk5elgnaXuHZxFrXzrqbN2eO+w/7POE+KXGf4/rBcXazZu0E",
	"Gn5S5XH2hozqcx6Nd8uex26AVemRH7s8cm4U79b/20jSecq8MN+9fCiiqUd0MfVD5U/IwbQFfi5tGv4F",
	"5VnU8ZT4o5wSt/xqpZWO4Uy2a07xrnt+17T0+hw9mvysu9zHqbfaW7xbLMK8vPNuZt0cmNjvLk7sa8jd",
	"KKFsykViL4khtzxT7nUT8cJz0U87iH6HTSE0HDlrIMW9O8Od7+glvS92kStBaxF9qpTgAZB52Tqce8pA",
	"5iqQGmRW7ifxAwZ9ZfGiupqouBqLxjG6hfyCEc9h8PICkwJY2w+IiytldhADbwLlCxexuX6OtZr1ajVG",
	"d6u1muL2mEeu1+REWoOTlVHvq+B4DoR21XDMADtMOd37Qw6MZUbt3o1XNAGVCWYvrCueOGaY+9jfXIl9",
	"K5+0bhgzpNzygsHfGi21RElHyO8mLhsUjw3fwjSrV3g136blYULeY5gPa+Pye+2G031tXJpRfRuXDw3V",
	"G1HBxqH5DqFUXWB4iIHDswrLD/3E1pMI54el1v0nDdqr4btmnHP57/Aq8/4odzy1sD3qHNaphZao39xr",
	"a39bZczXghzSvSPZTDUhjMwgAXthmL2NMe9yGQzrp/U9YKdHU5Zf3iz/HwAA//8aBuBjxV4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
